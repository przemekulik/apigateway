trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

stages:
 - stage: "Build"
   jobs:
     - job: "CreateAPIDeployable"
       steps:
         - task: ArchiveFiles@2
           inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/projects/petstore'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(System.DefaultWorkingDirectory)/postman/import/$(Build.BuildId).zip'
            replaceExistingArchive: true
            verbose: true
           displayName: 'Create the API Deployable from the flat representation'
         - publish: '$(System.DefaultWorkingDirectory)/postman/import/$(Build.BuildId).zip'
           artifact: APIDeployable.zip
           displayName: 'Publish the created API Deployable'
 - stage: "Deploy"
   jobs:
     - job : "DeployDeployableToAPIGateway"
       steps:
         - script: 'sudo npm install -g newman'
           workingDirectory: '$(System.DefaultWorkingDirectory)'
           displayName: 'Prerequisite'
         - download: current
           artifact: APIDeployable.zip
         - script: 'newman run import/ImportAPI.json  --reporters cli --env-var file_Loc="$(Pipeline.Workspace)/APIDeployable.zip" -e qa_environment.json'
           workingDirectory: '$(System.DefaultWorkingDirectory)/postman'
           displayName: 'Import the API To API Gateway'      
 - stage: "Test"
   jobs:
     - job: "RunAPIInvokeTests"
       steps:
        - script: 'sudo npm install -g newman'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          displayName: 'Prerequisite'
        - script: 'newman run api/APITest.json  --reporters cli,junit --reporter-junit-export Results/junitReport.xml -e qa_environment.json'
          workingDirectory: '$(System.DefaultWorkingDirectory)/postman'
          displayName: 'Run tests on the QA Machine'
          continueOnError: true
        - publish :  '$(System.DefaultWorkingDirectory)/postman/Results/junitReport.xml'
          artifact: UnitTestResult.xml
     - job: "RunPerformanceTests"
       steps:
         - script: 'echo Running performance Tests'
 - stage: "Report"
   jobs:
     - job: "PublishReport"
       steps:
        - download: current
          artifact: UnitTestResult.xml
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '$(Pipeline.Workspace)/*.xml'
            testRunTitle: 'QA environment test failures'
            publishRunAttachments: false
 - stage: "Rollout"
   condition: succeeded('Test')
   jobs:
     - job: "MergeDevelopToMaster"
       steps:
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              #!/usr/bin/env bash
              
              version=develop
              
              # Output
              echo "Releasing version $version"
              echo "-------------------------------------------------------------------------"
              git config --global user.email "przemek.kulik@gmail.com"
              git config --global user.name "przemekulik"

              # Get current branch and checkout if needed
              branch=$(git symbolic-ref --short -q HEAD)
              if [ "$branch" != "$version" ]; then
                git checkout $version
              fi

              # Checkout master branch and merge version branch into master
              git checkout master
              git merge $version --no-ff --no-edit
              git push
              
              # Checkout dev branch and merge master into dev (to ensure we have the version)
              git checkout dev
              git merge master --no-ff --no-edit
              git push

              # Success
              echo "-------------------------------------------------------------------------"
              echo "Release $version complete"
            failOnStderr: true
       
       
